https://leetcode.com/problems/two-sum/

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int arr[] = new int[2];
        Map<Integer,Integer> m = new HashMap<>();
        for(int i=0;i<nums.length;i++)
            m.put(nums[i],i);
        for(int i=0;i<nums.length;i++){
            if(m.containsKey(target-nums[i]) && i!=m.get(target-nums[i])){
                arr[0] = i;
                arr[1] = m.get(target-nums[i]);
                break;
            }
        }
        return arr;
    }
}

//Map -> 2:1   7:2    11:3   15:4
//Set cant be used, it will not give index, which will be used to verify we are not using same ele twice & index will be helpful get position of 2 elems
//sum-cur present in map & not same index as cur ele

//Logic
1) Traverse arr & add it in map<ele,index>
2) Traverse arr & check if target-curEle key is in map && that key's index is not qual to curEle
3) If found, make note of 2 indexs & break;

TC - O(n)
AS - O(n))
